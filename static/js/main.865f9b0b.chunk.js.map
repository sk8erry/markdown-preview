{"version":3,"sources":["components/TextInput.js","components/MarkdownOutput.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","react_default","a","createElement","name","cols","rows","value","this","props","onChange","handleInput","className","placeholder","React","Component","MarkdownOutput","__html","dangerouslySetInnerHTML","createMarkUp","marked","userInput","App","state","e","_this","setState","target","console","log","placeHolder","href","components_TextInput","components_MarkdownOutput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAmBeA,mLAfX,OACEC,EAAAC,EAAAC,cAAA,YACEC,KAAK,QACLC,KAAK,KACLC,KAAK,IACLC,MAAOC,KAAKC,MAAMF,MAClBG,SAAUF,KAAKC,MAAME,YACrBC,UAAU,YACTJ,KAAKC,MAAMI,oBAVIC,IAAMC,2BCcfC,uLAZAd,GACX,MAAO,CAACe,OAAQf,oCAGhB,OACED,EAAAC,EAAAC,cAAA,OACEe,wBAA2BV,KAAKW,aAAaC,IAAOZ,KAAKC,MAAMY,qBAP1CP,IAAMC,WCC7BF,SAAW,+zBA8EFS,6MA7CbC,MAAQ,CACNF,UAAWR,KAGbF,YAAc,SAACa,GACbC,EAAKC,SAAS,CACZL,UAAWG,EAAEG,OAAOpB,QAEtBqB,QAAQC,IAAIJ,EAAKF,MAAMO,aACvBF,QAAQC,IAAIhB,4EAIZ,OACEZ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACbX,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,0BAAR,eAAsD9B,EAAAC,EAAAC,cAAA,WACpEF,EAAAC,EAAAC,cAAA,0BAAiBF,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,sCAAR,WAA8D9B,EAAAC,EAAAC,cAAA,WAC/EF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,KAAG4B,KAAK,+CAAR,iBAER9B,EAAAC,EAAAC,cAAA,OAAKS,UAAU,mBACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WACbX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQS,UAAU,YAGpBX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,SACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,sBACbX,EAAAC,EAAAC,cAAC6B,EAAD,CAAWrB,YAAaH,KAAKG,YAAaE,YAAaL,KAAKe,MAAMF,cAGtEpB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,SACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,4BACbX,EAAAC,EAAAC,cAAC8B,EAAD,CAAgBZ,UAAWb,KAAKe,MAAMF,yBAnCtCN,mBCxBEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.865f9b0b.chunk.js","sourcesContent":["import React from 'react'\n\nclass TextInput extends React.Component {\n  render() {\n    return(\n      <textarea\n        name=\"input\"\n        cols=\"30\"\n        rows=\"5\"\n        value={this.props.value}\n        onChange={this.props.handleInput}\n        className=\"box left\">\n        {this.props.placeholder}\n      </textarea>\n\n    )\n  }\n}\n\nexport default TextInput","import React from 'react'\nimport marked from 'marked'\n\nclass MarkdownOutput extends React.Component {\n  createMarkUp(a) {\n    return {__html: a};\n  }\n  render() {\n    return (\n      <div\n        dangerouslySetInnerHTML = {this.createMarkUp(marked(this.props.userInput))}\n        />\n    )\n  }\n}\n\nexport default MarkdownOutput","import React, { Component } from 'react';\nimport TextInput from './components/TextInput'\nimport MarkdownOutput from './components/MarkdownOutput'\nimport './App.css';\nconst placeholder = `## A minimalist Markdown preview built with React <img src=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\" alt=\"react-logo\" width=\"50\"/>\n----\n### What is Markdown?\nsee [Wikipedia](http://en.wikipedia.org/wiki/Markdown)\n\n> Markdown is a lightweight markup language, originally created by John Gruber and Aaron Swartz allowing people \"to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML)\".\n\n----\n### usage\n1. Write markdown text in this textarea.\n2. Live preview on the right side\n\n----\n### Markdown quick reference\n# h1 Heading\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n*emphasis*\n\n**strong**\n\n* list\n\n>block quote\n\n    code (4 spaces indent)\n[links](http://wikipedia.org)`\n\nclass App extends Component {\n  state = {\n    userInput: placeholder\n  }\n\n  handleInput = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n    console.log(this.state.placeHolder)\n    console.log(placeholder)\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"info\">\n          <span>Made by <a href=\"https://rickyyang.moe/\">Ricky Yang</a></span><br/>\n          <span>Powered by <a href=\"https://github.com/markedjs/marked\">Marked</a></span><br/>\n          <span><a href=\"https://github.com/sk8erry/markdown-preview\">Github repo</a></span>\n        </div>\n        <div className=\"container-fluid\">\n          <div className=\"content\">\n            <div>\n              <header className=\"header\">\n              </header>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <div className=\"text-input-wrapper\">\n                  <TextInput handleInput={this.handleInput} placeholder={this.state.userInput}/>\n                </div>\n              </div>\n              <div className=\"col-6\">\n                <div className=\"markdown-preview-wrapper\">\n                  <MarkdownOutput userInput={this.state.userInput} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}